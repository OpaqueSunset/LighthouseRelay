//I am aware this is probably the worst possible way of doing it but I'm using this method till I get a better one. - Matt
/mob
	var/list/stats = list(st = 10, dx = 10, iq = 10, en = 10)

/*    ===== STATS ====
	Stats are the base of your characer.  They are generated by rolling 3 rand(1,6) and adding the total for each stat. Between (3-18)
	Each jobs has it's own "main stat" wich the highest value generated is assigned to.  The rest are random.
		These stats are going to be more varried then old interbay, but I think that's ok, as it gives you weakenesses to exploit.  All arbiters
	may be strong, but they may be slow or frail.
	Checks are performed by rolling rand(1,20) then adding (stat - 10) * 0.5  (18 = +4, 16 = +3, 14 = +2, 12 = +1, 10 = 0, 8 = -1, 6 = -2, 4 = -3)
	Each check sets it's own difficulty (DC), which the roll + stat mod + mood mod are added too
	Stat checks should mainly be used for things happening to the player.  Are you strong enough to open the airlock?  Are you dexterious enough
	to dodge this attack?  Some old checks may break this rule, but try to stick to it.
	The new stats check will certainly be more random then the old stats check, as exceeding the difficulty (DC) of the check won't be an automatic pass.
	This will need to be tweaked and tested. the old stats check is commented at the bottom.
*/

// Takes a stat *VALUE*.
/mob/proc/statcheck(var/stat, var/requirement, var/message = null, var/type = null)//Requirement needs to be 1 through 20
	var/roll = rand(1,20)// our "dice"
	//log_debug("Roll: [roll], Mood affect: (-)[mood_affect(1)], Ability modifier [stat_to_modifier(stat)]")
	log_debug("[src] Rolled a [roll] against a DC [requirement] [type] check")
	roll += stat_to_modifier(stat) //our stat mod
	//learn_stats(type) We can't have nice things
	if(roll >= requirement)//We met the DC requirement
		//world << "Rolled and passed."
		return 1
	else
		if(message)
			to_chat(src, "<span class = 'warning'>[message]</span>")
		return 0
	return 1

/mob/proc/learn_stats(var/stat_type)
	var/initial_stat = round(stats[stat_type])
	if(stats[stat_type] > 15)
		return 0
	else
		//If they're stat mod is less then or equal to zero, don't set it so they can learn slowly.
		//This is not the STAT, it's the STAT MODIFIER.  (stat - 10) / 2
		var/learn_speed = stat_to_modifier(stats[STAT_IQ]) > 0 ? stat_to_modifier(stats[STAT_IQ]) : 1
		stats[stat_type] += 0.001 * learn_speed
	if(round(stats[stat_type]) > initial_stat)
		to_chat(src,"You feel like live you've gained new insights.")

proc/stat_to_modifier(var/stat)
	return round((stat - 10) * 0.5)

proc/strToDamageModifier(var/strength)
	return strength * 0.1  //This is better then division

proc/strToSpeedModifier(var/strength, var/w_class)//Looks messy. Is messy. Is also only used once. But I don't give a fuuuuuuuuck.
	switch(strength)
		if(1 to 5)
			if(w_class > ITEM_SIZE_NORMAL)
				return 20

proc/conToToxinModifier(var/constitution, var/w_class)
	return stat_to_modifier(constitution) * 0.05

//Stats helpers.
/mob/proc/add_stats(var/stre, var/dexe, var/inti, var/cons)//To make adding stats quicker.
	if(stre)
		stats[STAT_ST] = stre
	if(dexe)
		stats[STAT_DX] = dexe
	if(inti)
		stats[STAT_IQ] = inti
	if(cons)
		stats[STAT_EN] = cons

//Different way of generating stats.  Takes a "main_stat" argument.
// Totals top 3 D6 for stats.  Then puts the top stat in the "main_stat" and the rest randomly
/mob/proc/generate_stats(var/main_stat)
	var/list/rand_stats = list()
	var/top_stat = 0
	//Roll a new random roll for each stat
	for(var/stat in stats)
		rand_stats += (rand(1,6) + rand(1,6) + rand(1,6))
	rand_stats = insertion_sort_numeric_list_descending(rand_stats)
	top_stat = rand_stats[1]
	rand_stats.Remove(top_stat)
	//Set the job's main stat
	stats[main_stat] = top_stat
	//Do all stat except main stat
	for(var/stat in stats - main_stat)
		stats[stat] = pick(rand_stats)
		rand_stats.Remove(stats[stat])

/mob/proc/adjustStrength(var/num)
	stats[STAT_ST] += num

/mob/proc/adjustDexterity(var/num)
	stats[STAT_DX] += num

/mob/proc/adjustInteligence(var/num)
	stats[STAT_IQ] += num


/mob/proc/temporary_stat_adjust(var/stat, var/modifier, var/time)
	if(stats[stat] && modifier && time)//In case you somehow call this without using all three vars.
		stats[stat] += modifier
		spawn(time)
			stats[stat] -= modifier
